import type { JSONSchema } from '@composedb/types';
import { type DirectiveAnnotation } from '@graphql-tools/utils';
import { type GraphQLInterfaceType, GraphQLList, type GraphQLObjectType, type GraphQLScalarType, type GraphQLType } from 'graphql';
import type { ScalarSchema } from '../types.js';
import type { ItemDefinition, ListFieldDefinition, ObjectDefinition, ObjectFieldsDefinition, ParsedModelDefinition, ReferenceFieldType, SchemaDefinition, ViewFieldDefinition } from './types.js';
declare type NumberDirectiveArguments = {
    default?: number;
    max?: number;
    min?: number;
};
declare type DefinitionWithReferences<T> = {
    definition: T;
    references: Array<string>;
};
export declare class SchemaParser {
    #private;
    constructor(schema: string);
    parse(): SchemaDefinition;
    _parseModelDirective(type: GraphQLInterfaceType | GraphQLObjectType): ParsedModelDefinition | void;
    _parseObject(type: GraphQLInterfaceType | GraphQLObjectType): ObjectDefinition;
    _parseObjectFields(type: GraphQLInterfaceType | GraphQLObjectType): DefinitionWithReferences<ObjectFieldsDefinition>;
    _parseViews(objectName: string, fieldName: string, type: GraphQLType, directives: Array<DirectiveAnnotation>): ViewFieldDefinition | void;
    _parseListType(objectName: string, fieldName: string, type: GraphQLList<GraphQLType>, required: boolean, directives: Array<DirectiveAnnotation>): DefinitionWithReferences<ListFieldDefinition>;
    _parseItemType(objectName: string, fieldName: string, type: GraphQLType, directives: Array<DirectiveAnnotation>): DefinitionWithReferences<ItemDefinition>;
    _parseScalarSchema(objectName: string, fieldName: string, type: GraphQLScalarType, directives: Array<DirectiveAnnotation>): ScalarSchema;
    _validateIntegerSchema(objectName: string, fieldName: string, schema: JSONSchema.Integer, directive: DirectiveAnnotation | undefined): JSONSchema.Integer;
    _validateNumberSchema(objectName: string, fieldName: string, schema: JSONSchema.Number, directive: DirectiveAnnotation | undefined): JSONSchema.Number;
    _validateNumberArguments<T extends JSONSchema.Integer | JSONSchema.Number>(objectName: string, fieldName: string, schema: T, args: NumberDirectiveArguments): T;
    _validateStringSchema(objectName: string, fieldName: string, schema: JSONSchema.String, string: DirectiveAnnotation | undefined): JSONSchema.String;
    _getReferenceFieldType(type: GraphQLType): ReferenceFieldType | void;
}
export declare function parseSchema(schema: string): SchemaDefinition;
export {};
