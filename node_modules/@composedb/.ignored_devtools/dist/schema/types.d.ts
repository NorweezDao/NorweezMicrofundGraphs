import type { ModelAccountRelation, ModelDefinition } from '@ceramicnetwork/stream-model';
import type { RuntimeViewField } from '@composedb/types';
import type { ScalarSchema } from '../types.js';
export declare type CreateParsedModelDefinition = {
    action: 'create';
    accountRelation: ModelAccountRelation;
    description: string;
    interface: boolean;
    implements: Array<string>;
};
export declare type LoadModelDefinition = {
    action: 'load';
    id: string;
};
export declare type ParsedModelDefinition = CreateParsedModelDefinition | LoadModelDefinition;
export declare type FieldCommonDefinition = {
    required: boolean;
};
export declare type EnumFieldDefinition = FieldCommonDefinition & {
    type: 'enum';
    name: string;
};
export declare type ObjectReferenceFieldDefinition = FieldCommonDefinition & {
    type: 'object';
    name: string;
};
export declare type ReferenceFieldDefinition = EnumFieldDefinition | ObjectReferenceFieldDefinition;
export declare type ReferenceFieldType = ReferenceFieldDefinition['type'];
export declare type ScalarFieldDefinition = FieldCommonDefinition & {
    type: 'scalar';
    schema: ScalarSchema;
};
export declare type ItemDefinition = ReferenceFieldDefinition | ScalarFieldDefinition;
export declare type ListFieldDefinition = FieldCommonDefinition & {
    type: 'list';
    item: ItemDefinition;
    maxLength: number;
    minLength?: number;
};
export declare type ViewFieldDefinition = FieldCommonDefinition & RuntimeViewField;
export declare type ObjectFieldDefinition = ItemDefinition | ListFieldDefinition | ViewFieldDefinition;
export declare type ObjectFieldsDefinition = Record<string, ObjectFieldDefinition>;
export declare type ObjectDefinition = {
    implements: Array<string>;
    properties: ObjectFieldsDefinition;
    references: Array<string>;
};
export declare type SchemaDefinition = {
    enums: Record<string, Array<string>>;
    interfaces: Record<string, ObjectDefinition>;
    models: Record<string, ParsedModelDefinition>;
    objects: Record<string, ObjectDefinition>;
};
export declare type CreateModelDefinition = {
    action: 'create';
    definition: ModelDefinition;
};
export declare type AbstractModelDefinition = CreateModelDefinition | LoadModelDefinition;
export declare type AbstractCompositeDefinition = {
    models: Record<string, AbstractModelDefinition>;
    commonEmbeds: Array<string>;
};
