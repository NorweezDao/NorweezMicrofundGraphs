{"version":3,"file":"index.umd.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/signers/ES256Signer.ts","../src/SignerAlgorithm.ts","../src/blockchains/utils/ripemd160.ts","../src/blockchains/bip122.ts","../src/blockchains/cosmos.ts","../src/blockchains/index.ts","../src/VerifierAlgorithm.ts","../src/Errors.ts","../src/JWT.ts","../src/JWE.ts","../src/ECDH.ts","../src/xc20pEncryption.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\nimport { bases } from 'multiformats/basics'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number | null\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\nexport function bytesToMultibase(b: Uint8Array, base: keyof typeof bases): string {\n  return bases[base].encode(b)\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = <number>recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam?: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport sha3 from 'js-sha3'\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(sha3.keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(\n  secret: Uint8Array,\n  keyLen: number,\n  alg: string,\n  producerInfo?: Uint8Array,\n  consumerInfo?: Uint8Array\n): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), // apu\n    lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), // apv\n    writeUint32BE(keyLen),\n  ])\n\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\nimport elliptic from 'elliptic'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: Uint8Array, recoverable = false): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: elliptic.ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: elliptic.ec.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam,\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose, hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexToBytes(hexPrivateKey), true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import { hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexToBytes(hexPrivateKey))\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array`\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = secretKey\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64ToBytes(base64PrivateKey))\n}\n\nexport default NaclSigner\n","import { leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\nimport elliptic from 'elliptic'\n\nconst secp256r1 = new elliptic.ec('p256')\n\n/**\n *  Creates a configured signer function for signing data using the ES256 (secp256r1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256Signer(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256Signer(privateKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: elliptic.ec.KeyPair = secp256r1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s }: elliptic.ec.Signature = keyPair.sign(sha256(data))\n    return toJose({\n      r: leftpad(r.toString('hex')),\n      s: leftpad(s.toString('hex')),\n    })\n  }\n}\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature)\n    } else {\n      return signature\n    }\n  }\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('invalid_config: expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256: ES256SignerAlg(),\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg(),\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","// https://github.com/crypto-browserify/ripemd160/blob/master/index.js\n\nconst zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14,\n  4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2,\n  10, 14, 1, 3, 8, 11, 6, 15, 13,\n]\n\nconst zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1,\n  3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5,\n  8, 7, 6, 2, 13, 14, 0, 3, 9, 11,\n]\n\nconst sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11,\n  13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5,\n  11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,\n]\n\nconst sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7,\n  15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9,\n  12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,\n]\n\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction rotl(x: number, n: number) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0\n}\n\nexport class Ripemd160 {\n  // state\n  private _a = 0x67452301\n  private _b = 0xefcdab89\n  private _c = 0x98badcfe\n  private _d = 0x10325476\n  private _e = 0xc3d2e1f0\n  private _blockOffset = 0\n  private _block: Uint8Array\n  private _blockSize: number\n  private _length = [0, 0, 0, 0]\n  private _finalized: boolean\n\n  constructor(blockSize = 64) {\n    this._block = new Uint8Array(blockSize)\n    this._blockSize = blockSize\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n    this._finalized = false\n  }\n\n  update = (data: Uint8Array): Ripemd160 => {\n    if (this._finalized) throw new Error('Digest already called')\n\n    // consume data\n    const block = this._block\n    let offset = 0\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (let i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++]\n      this._update()\n      this._blockOffset = 0\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n    // update length\n    for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry\n      carry = (this._length[j] / 0x0100000000) | 0\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry\n    }\n\n    return this\n  }\n\n  digest = (): Uint8Array => {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    const digest = this._digest()\n\n    // reset state\n    this._block.fill(0)\n    this._blockOffset = 0\n    for (let i = 0; i < 4; ++i) this._length[i] = 0\n\n    return digest\n  }\n\n  private _update = () => {\n    const words = new Array(16)\n    const temp = new DataView(this._block.buffer)\n    for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true)\n\n    let al = this._a | 0\n    let bl = this._b | 0\n    let cl = this._c | 0\n    let dl = this._d | 0\n    let el = this._e | 0\n\n    let ar = this._a | 0\n    let br = this._b | 0\n    let cr = this._c | 0\n    let dr = this._d | 0\n    let er = this._e | 0\n\n    // computation\n    for (let i = 0; i < 80; i += 1) {\n      let tl\n      let tr\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n      }\n\n      al = el\n      el = dl\n      dl = rotl(cl, 10)\n      cl = bl\n      bl = tl\n\n      ar = er\n      er = dr\n      dr = rotl(cr, 10)\n      cr = br\n      br = tr\n    }\n\n    // update state\n    const t = (this._b + cl + dr) | 0\n    this._b = (this._c + dl + er) | 0\n    this._c = (this._d + el + ar) | 0\n    this._d = (this._e + al + br) | 0\n    this._e = (this._a + bl + cr) | 0\n    this._a = t\n  }\n\n  private _digest = () => {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64)\n      this._update()\n      this._blockOffset = 0\n    }\n\n    this._block.fill(0, this._blockOffset, 56)\n    const temp = new DataView(this._block.buffer)\n    temp.setUint32(56, this._length[0], true)\n    temp.setUint32(60, this._length[1], true)\n    this._block = new Uint8Array(temp.buffer)\n    this._update()\n\n    // produce result\n    const buffer = new DataView(new Uint8Array(20).buffer)\n    buffer.setInt32(0, this._a, true)\n    buffer.setInt32(4, this._b, true)\n    buffer.setInt32(8, this._c, true)\n    buffer.setInt32(12, this._d, true)\n    buffer.setInt32(16, this._e, true)\n\n    return new Uint8Array(buffer.buffer)\n  }\n}\n","import * as u8a from 'uint8arrays'\nimport { bytesToBase58, base58ToBytes } from '../util'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nexport const publicKeyToAddress = (publicKey: string, otherAddress: string): string => {\n  // Use the same version/prefix byte as the given address.\n  const version = u8a.toString(base58ToBytes(otherAddress).slice(0, 1), 'hex')\n  const publicKeyBuffer = u8a.fromString(publicKey, 'hex')\n  const publicKeyHash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const step1 = version + u8a.toString(publicKeyHash, 'hex')\n  const step2 = sha256(u8a.fromString(step1, 'hex'))\n  const step3 = sha256(step2)\n  const checksum = u8a.toString(step3, 'hex').substring(0, 8)\n  const step4 = step1 + checksum\n  return bytesToBase58(u8a.fromString(step4, 'hex'))\n}\n","import elliptic from 'elliptic'\nimport { bech32 } from 'bech32'\nimport * as u8a from 'uint8arrays'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nconst EC = elliptic.ec\n\nexport const publicKeyToAddress = (publicKey: string, prefix: string): string => {\n  const ec = new EC('secp256k1')\n  const compressedPublicKey = ec.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true)\n  const publicKeyBuffer = u8a.fromString(compressedPublicKey, 'hex')\n  const hash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const words = bech32.toWords(hash)\n  return bech32.encode(prefix, words).replace(prefix, '')\n}\n","import { publicKeyToAddress as bip122 } from './bip122'\nimport { publicKeyToAddress as cosmos } from './cosmos'\nimport { toEthereumAddress } from '../Digest'\n\nexport const verifyBlockchainAccountId = (publicKey: string, blockchainAccountId: string | undefined): boolean => {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':')\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = bip122(publicKey, chain[chain.length - 1])\n        break\n      case 'cosmos':\n        chain[chain.length - 1] = cosmos(publicKey, chain[1])\n        break\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey)\n        break\n      default:\n        return false\n    }\n    return chain.join(':').toLowerCase() === blockchainAccountId.toLowerCase()\n  }\n  return false\n}\n","import type { SignatureInput } from 'elliptic'\nimport elliptic from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport type { VerificationMethod } from 'did-resolver'\nimport { bases } from 'multiformats/basics'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\nimport { verifyBlockchainAccountId } from './blockchains'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\nconst secp256r1 = new elliptic.ec('p256')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawSig: Uint8Array = base64ToBytes(signature)\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawSig.slice(0, 32))\n  const s: string = bytesToHex(rawSig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64]\n  }\n  return sigObj\n}\n\ninterface LegacyVerificationMethod extends VerificationMethod {\n  publicKeyBase64: string\n}\n\nfunction extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if ((<LegacyVerificationMethod>pk).publicKeyBase64) {\n    return base64ToBytes((<LegacyVerificationMethod>pk).publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256k1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'P-256' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256r1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (\n    pk.publicKeyJwk &&\n    pk.publicKeyJwk.kty === 'OKP' &&\n    pk.publicKeyJwk.crv === 'Ed25519' &&\n    pk.publicKeyJwk.x\n  ) {\n    return base64ToBytes(pk.publicKeyJwk.x)\n  } else if (pk.publicKeyMultibase) {\n    const { base16, base58btc, base64, base64url } = bases\n    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)))\n    return baseDecoder.decode(pk.publicKeyMultibase)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256(data: string, signature: string, authenticators: VerificationMethod[]): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n\n  const signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256r1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n  const blockchainAddressKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== 'undefined'\n  })\n\n  let signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys)\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 },\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): VerificationMethod | undefined => {\n    const hash: Uint8Array = sha256(data)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, <SignatureInput>sigObj, <number>sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex).toLowerCase()\n\n    const signer: VerificationMethod | undefined = authenticators.find((pk: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        pk.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        pk.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress || // CAIP-2\n        verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10\n      )\n    })\n\n    return signer\n  }\n\n  const signer: VerificationMethod[] = signatures\n    .map(checkSignatureAgainstSigner)\n    .filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n\n  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer = authenticators.find((pk: VerificationMethod) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  })\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256: verifyES256,\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519,\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","/**\n * Error prefixes used for known verification failure cases.\n *\n * For compatibility, these error prefixes match the existing error messages, but will be adjusted in a future major\n * version update to match the scenarios better.\n *\n * @beta\n */\nexport const JWT_ERROR = {\n  /**\n   * Thrown when a JWT payload schema is unexpected or when validity period does not match\n   */\n  INVALID_JWT: 'invalid_jwt',\n  /**\n   * Thrown when the verifier audience does not match the one set in the JWT payload\n   */\n  INVALID_AUDIENCE: 'invalid_config',\n  /**\n   * Thrown when none of the public keys of the issuer match the signature of the JWT.\n   *\n   * This is equivalent to `NO_SUITABLE_KEYS` when the `proofPurpose` is NOT specified.\n   */\n  INVALID_SIGNATURE: 'invalid_signature',\n  /**\n   * Thrown when the DID document of the issuer does not have any keys that match the signature for the given\n   * `proofPurpose`.\n   *\n   * This is equivalent to `invalid_signature`, when a `proofPurpose` is specified.\n   */\n  NO_SUITABLE_KEYS: 'no_suitable_keys',\n  /**\n   * Thrown when the `alg` of the JWT or the encoding of the key is not supported\n   */\n  NOT_SUPPORTED: 'not_supported',\n  /**\n   * Thrown when the DID resolver is unable to resolve the issuer DID.\n   */\n  RESOLVER_ERROR: 'resolver_error',\n}\n","import canonicalizeData from 'canonicalize'\nimport type { DIDDocument, DIDResolutionResult, Resolvable, VerificationMethod } from 'did-resolver'\nimport SignerAlg from './SignerAlgorithm'\nimport { decodeBase64url, EcdsaSignature, encodeBase64url } from './util'\nimport VerifierAlgorithm from './VerifierAlgorithm'\nimport { JWT_ERROR } from './Errors'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport type ProofPurposeTypes =\n  | 'assertionMethod'\n  | 'authentication'\n  // | 'keyAgreement' // keyAgreement VerificationMethod should not be used for signing\n  | 'capabilityDelegation'\n  | 'capabilityInvocation'\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n  canonicalize?: boolean\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: ProofPurposeTypes\n  policies?: JWTVerifyPolicies\n}\n\n/**\n * Overrides the different types of checks performed on the JWT besides the signature check\n */\nexport interface JWTVerifyPolicies {\n  // overrides the timestamp against which the validity interval is checked\n  now?: number\n  // when set to false, the timestamp checks ignore the Not Before(`nbf`) property\n  nbf?: boolean\n  // when set to false, the timestamp checks ignore the Issued At(`iat`) property\n  iat?: boolean\n  // when set to false, the timestamp checks ignore the Expires At(`exp`) property\n  exp?: boolean\n  // when set to false, the JWT audience check is skipped\n  aud?: boolean\n}\n\nexport interface JWSCreationOptions {\n  canonicalize?: boolean\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  exp?: number\n  rexp?: number\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\n/**\n * Result object returned by {@link verifyJWT}\n */\nexport interface JWTVerified {\n  /**\n   * Set to true for a JWT that passes all the required checks minus any verification overrides.\n   */\n  verified: true\n\n  /**\n   * The decoded JWT payload\n   */\n  payload: Partial<JWTPayload>\n\n  /**\n   * The result of resolving the issuer DID\n   */\n  didResolutionResult: DIDResolutionResult\n\n  /**\n   * the issuer DID\n   */\n  issuer: string\n\n  /**\n   * The public key of the issuer that matches the JWT signature\n   */\n  signer: VerificationMethod\n\n  /**\n   * The original JWT that was verified\n   */\n  jwt: string\n\n  /**\n   * Any overrides that were used during verification\n   */\n  policies?: JWTVerifyPolicies\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\n\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  Ed25519: [\n    'ED25519SignatureVerification',\n    'Ed25519VerificationKey2018',\n    'Ed25519VerificationKey2020',\n    'JsonWebKey2020',\n  ],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018', 'Ed25519VerificationKey2020', 'JsonWebKey2020'],\n}\n\nexport const SELF_ISSUED_V2 = 'https://self-issued.me/v2'\nexport const SELF_ISSUED_V0_1 = 'https://self-issued.me'\n\ntype LegacyVerificationMethod = { publicKey?: string }\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction encodeSection(data: any, shouldCanonicalize = false): string {\n  if (shouldCanonicalize) {\n    return encodeBase64url(<string>canonicalizeData(data))\n  } else {\n    return encodeBase64url(JSON.stringify(data))\n  }\n}\n\nexport const NBF_SKEW = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`,\n    }\n  }\n  throw new Error('invalid_argument: Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\n *                                                    payload properties\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | Partial<JWTPayload>,\n  signer: Signer,\n  header: Partial<JWTHeader> = {},\n  options: JWSCreationOptions = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize)\n  const signingInput: string = [encodeSection(header, options.canonicalize), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is\n * over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports:\n *   [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K. Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object}            header                optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or\n *   rejects with an error\n */\nexport async function createJWT(\n  payload: Partial<JWTPayload>,\n  { issuer, signer, alg, expiresIn, canonicalize }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('missing_signer: No Signer functionality has been configured')\n  if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined,\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = <number>(payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('invalid_argument: JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header, { canonicalize })\n}\n\nfunction verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\n *\n *  @example\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubKeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubKeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the DID document of the issuer of the JWT.\n *\n *  @example\n *  ```ts\n *  verifyJWT(\n *      'did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....',\n *      {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}\n *    ).then(obj => {\n *        const did = obj.did // DID of signer\n *        const payload = obj.payload\n *        const doc = obj.didResolutionResult.didDocument // DID Document of issuer\n *        const jwt = obj.jwt\n *        const signerKeyId = obj.signer.id // ID of key in DID document that signed JWT\n *        ...\n *    })\n *  ```\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the\n *   DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an\n *   error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: undefined,\n    auth: undefined,\n    audience: undefined,\n    callbackUrl: undefined,\n    skewTime: undefined,\n    proofPurpose: undefined,\n    policies: {},\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const proofPurpose: ProofPurposeTypes | undefined = Object.prototype.hasOwnProperty.call(options, 'auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n\n  let did = ''\n\n  if (!payload.iss) {\n    throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT iss is required`)\n  }\n\n  if (payload.iss === SELF_ISSUED_V2) {\n    if (!payload.sub) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT sub is required`)\n    }\n    if (typeof payload.sub_jwk === 'undefined') {\n      did = payload.sub\n    } else {\n      did = (header.kid || '').split('#')[0]\n    }\n  } else if (payload.iss === SELF_ISSUED_V0_1) {\n    if (!payload.did) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT did is required`)\n    }\n    did = payload.did\n  } else {\n    did = payload.iss\n  }\n\n  if (!did) {\n    throw new Error(`${JWT_ERROR.INVALID_JWT}: No DID has been found in the JWT`)\n  }\n\n  const { didResolutionResult, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    did,\n    proofPurpose\n  )\n  const signer: VerificationMethod = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = typeof options.policies?.now === 'number' ? options.policies.now : Math.floor(Date.now() / 1000)\n  const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (options.policies?.nbf !== false && payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (options.policies?.iat !== false && payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (options.policies?.exp !== false && payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (options.policies?.aud !== false && payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error(\n          `${JWT_ERROR.INVALID_AUDIENCE}: JWT audience is required but your app address has not been configured`\n        )\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`${JWT_ERROR.INVALID_AUDIENCE}: JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { verified: true, payload, didResolutionResult, issuer, signer, jwt, policies: options.policies }\n  }\n  throw new Error(\n    `${JWT_ERROR.INVALID_SIGNATURE}: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`\n  )\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of\n * provided DID\n *\n *  @example\n *  ```ts\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      // ...\n *  })\n *  ```\n *\n *  @param resolver - {Resolvable} a DID resolver function that can obtain the `DIDDocument` for the `issuer`\n *  @param alg - {String} a JWT algorithm\n *  @param issuer - {String} a Decentralized Identifier (DID) to lookup\n *  @param proofPurpose - {ProofPurposeTypes} *Optional* Use the verificationMethod linked in that section of the\n *   issuer DID document\n *  @return {Promise<DIDAuthenticator>} a promise which resolves with an object containing an array of authenticators\n *   or rejects with an error if none exist\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  proofPurpose?: ProofPurposeTypes\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`${JWT_ERROR.NOT_SUPPORTED}: No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON },\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error || didResult.didDocument == null) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(\n      `${JWT_ERROR.RESOLVER_ERROR}: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`\n    )\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid?: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || []),\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (\n      proofPurpose.startsWith('assertion') &&\n      !Object.getOwnPropertyNames(didResult?.didDocument).includes('assertionMethod')\n    ) {\n      didResult.didDocument = { ...(<DIDDocument>didResult.didDocument) }\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<LegacyVerificationMethod>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<LegacyVerificationMethod>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null) as VerificationMethod[]\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `${JWT_ERROR.NO_SUITABLE_KEYS}: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`${JWT_ERROR.NO_SUITABLE_KEYS}: DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { fromString } from 'uint8arrays'\nimport { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ProtectedHeader = Record<string, any> & Partial<RecipientHeader>\n\n/**\n * The JWK representation of an ephemeral public key.\n * See https://www.rfc-editor.org/rfc/rfc7518.html#section-6\n */\ninterface EphemeralPublicKey {\n  kty?: string\n  //ECC\n  crv?: string\n  x?: string\n  y?: string\n  //RSA\n  n?: string\n  e?: string\n}\n\nexport interface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: EphemeralPublicKey\n  kid?: string\n  apv?: string\n  apu?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: ProtectedHeader, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Recipient) => Promise<Uint8Array | null>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: <string>protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag),\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader = {},\n  aad?: Uint8Array\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('invalid_argument: Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        const recipient = await encrypter.encryptCek?.(cek)\n        if (recipient) {\n          jwe?.recipients?.push(recipient)\n        }\n      }\n    }\n    return <JWE>jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc)\n    throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = fromString(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected)\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('bad_jwe: missing recipients')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('failure: Failed to decrypt')\n  return cleartext\n}\n","import { sharedKey } from '@stablelib/x25519'\n\n/**\n * A wrapper around `mySecretKey` that can compute a shared secret using `theirPublicKey`.\n * The promise should resolve to a `Uint8Array` containing the raw shared secret.\n *\n * This method is meant to be used when direct access to a secret key is impossible or not desired.\n *\n * @param theirPublicKey `Uint8Array` the other party's public key\n * @returns a `Promise` that resolves to a `Uint8Array` representing the computed shared secret\n */\nexport type ECDH = (theirPublicKey: Uint8Array) => Promise<Uint8Array>\n\n/**\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\n *\n * @throws 'invalid_argument:...' if the secret key size is wrong\n */\nexport function createX25519ECDH(mySecretKey: Uint8Array): ECDH {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519')\n  }\n  return async (theirPublicKey: Uint8Array): Promise<Uint8Array> => {\n    if (theirPublicKey.length !== 32) {\n      throw new Error('invalid_argument: incorrect publicKey key length for X25519')\n    }\n    return sharedKey(mySecretKey, theirPublicKey)\n  }\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter, ProtectedHeader } from './JWE'\nimport type { VerificationMethod, Resolvable } from 'did-resolver'\nimport { ECDH } from './ECDH'\nimport { fromString } from 'uint8arrays/from-string'\n\n/**\n * Extra parameters for JWE using authenticated encryption\n */\nexport type AuthEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.2}\n   * base64url encoded\n   */\n  apu?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.3}\n   * base64url encoded\n   */\n  apv?: string\n}\n\n/**\n * Extra parameters for JWE using anonymous encryption\n */\nexport type AnonEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n}\n\n/**\n * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\n * sender private key to encrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientPublicKey the byte array representing the recipient public key\n * @param senderSecret either a Uint8Array representing the sender secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param options {@link AuthEncryptParams} used to specify extra header parameters\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options)\n}\n\n/**\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\n *\n * @param publicKey the byte array representing the recipient public key\n * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonEncrypter(publicKey: Uint8Array, options: Partial<AnonEncryptParams> = {}): Encrypter {\n  return x25519Encrypter(publicKey, options?.kid)\n}\n\n/**\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\n * sender public key to decrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param senderPublicKey the byte array representing the sender public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthDecrypter(recipientSecret: Uint8Array | ECDH, senderPublicKey: Uint8Array): Decrypter {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey)\n}\n\n/**\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonDecrypter(recipientSecret: Uint8Array | ECDH): Decrypter {\n  return x25519Decrypter(recipientSecret)\n}\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv,\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = fromString(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader)\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader,\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array): Promise<Uint8Array | null> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n\n  let partyUInfo: Uint8Array\n  let partyVInfo: Uint8Array\n  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu)\n  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv)\n\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const zE = sharedKey(epk.secretKey, recipientPublicKey)\n\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    let zS\n    if (senderSecret instanceof Uint8Array) {\n      zS = sharedKey(senderSecret, recipientPublicKey)\n    } else {\n      zS = await senderSecret(recipientPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo)\n\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (options.kid) recipient.header.kid = options.kid\n    if (options.apu) recipient.header.apu = options.apu\n    if (options.apv) recipient.header.apv = options.apv\n\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]> {\n  const encryptersForDID = async (did: string, resolved: string[] = []): Promise<Encrypter[]> => {\n    const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n    resolved.push(did)\n    if (didResolutionMetadata?.error || didDocument == null) {\n      throw new Error(\n        `resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n      )\n    }\n    let controllerEncrypters: Encrypter[] = []\n    if (!didDocument.controller && !didDocument.keyAgreement) {\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    }\n    if (didDocument.controller) {\n      let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller]\n      controllers = controllers.filter((c) => !resolved.includes(c))\n      const encrypterPromises = controllers.map((did) =>\n        encryptersForDID(did, resolved).catch(() => {\n          return []\n        })\n      )\n      const encrypterArrays = await Promise.all(encrypterPromises)\n      controllerEncrypters = ([] as Encrypter[]).concat(...encrypterArrays)\n    }\n    const agreementKeys: VerificationMethod[] = didDocument.keyAgreement\n      ?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      ?.filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n    const pks =\n      agreementKeys?.filter((key) => {\n        // TODO: should be able to use non base58 keys too\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      }) || []\n    if (!pks.length && !controllerEncrypters.length)\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    return pks\n      .map((pk) => x25519Encrypter(base58ToBytes(<string>pk.publicKeyBase58), pk.id))\n      .concat(...controllerEncrypters)\n  }\n\n  const encrypterPromises = dids.map((did) => encryptersForDID(did))\n  const encrypterArrays = await Promise.all(encrypterPromises)\n  const flattenedArray = ([] as Encrypter[]).concat(...encrypterArrays)\n  return flattenedArray\n}\n\nfunction validateHeader(header?: ProtectedHeader) {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header')\n  }\n}\n\nexport function x25519Decrypter(receiverSecret: Uint8Array | ECDH): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    validateHeader(recipient?.header)\n    recipient = <Recipient>recipient\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let sharedSecret\n    if (receiverSecret instanceof Uint8Array) {\n      sharedSecret = sharedKey(receiverSecret, publicKey)\n    } else {\n      sharedSecret = await receiverSecret(publicKey)\n    }\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(<string>recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array\n): Decrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    validateHeader(recipient.header)\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let zE: Uint8Array\n    let zS: Uint8Array\n\n    if (recipientSecret instanceof Uint8Array) {\n      zE = sharedKey(recipientSecret, publicKey)\n      zS = sharedKey(recipientSecret, senderPublicKey)\n    } else {\n      zE = await recipientSecret(publicKey)\n      zS = await recipientSecret(senderPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    let producerInfo\n    let consumerInfo\n    if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n    if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n\n    const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n"],"names":["bytesToBase64url","b","u8a","toString","base64ToBytes","s","inputBase64Url","replace","fromString","base58ToBytes","bytesToBase58","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Uint8Array","set","Error","fromJose","signature","signatureBytes","length","TypeError","slice","undefined","toSealed","ciphertext","tag","concat","leftpad","data","size","repeat","sha256","payload","hash","keccak","sha3","keccak_256","arrayBuffer","toEthereumAddress","hexPublicKey","hashInput","writeUint32BE","value","array","encoded","lengthAndInput","concatKDF","secret","keyLen","alg","producerInfo","consumerInfo","roundNumber","secp256k1","elliptic","ec","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","secretKey","dataBytes","sig","NaclSigner","base64PrivateKey","secp256r1","ES256Signer","instanceOfEcdsaSignature","object","ES256SignerAlg","ES256KSignerAlg","Ed25519SignerAlg","algorithms","ES256","ES256K","Ed25519","EdDSA","SignerAlg","impl","zl","zr","sl","sr","hl","hr","rotl","x","n","fn1","a","c","d","e","m","k","fn2","fn3","fn4","fn5","Ripemd160","constructor","blockSize","_a","_b","_c","_d","_e","_blockOffset","_block","_blockSize","_length","_finalized","update","block","offset","i","_update","j","carry","digest","_digest","fill","words","Array","temp","DataView","buffer","getInt32","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","setUint32","setInt32","publicKeyToAddress","publicKey","otherAddress","version","publicKeyBuffer","publicKeyHash","step1","step2","step3","checksum","step4","EC","prefix","compressedPublicKey","keyFromPublic","getPublic","encode","bech32","toWords","verifyBlockchainAccountId","blockchainAccountId","chain","split","bip122","cosmos","join","toSignatureObject","rawSig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","publicKeyJwk","crv","y","kty","publicKeyMultibase","base16","base58btc","base64","base64url","bases","baseDecoder","decoder","or","decode","verifyES256","authenticators","fullPublicKeys","filter","ethereumAddress","find","pubBytes","verify","err","verifyES256K","blockchainAddressKeys","verifyRecoverableES256K","signatures","so","checkSignatureAgainstSigner","recoveredKey","recoverPubKey","recoveredPublicKeyHex","recoveredCompressedPublicKeyHex","recoveredAddress","keyHex","map","key","verifyEd25519","clear","VerifierAlgorithm","JWT_ERROR","INVALID_JWT","INVALID_AUDIENCE","INVALID_SIGNATURE","NO_SUITABLE_KEYS","NOT_SUPPORTED","RESOLVER_ERROR","resolveAuthenticator","resolver","issuer","proofPurpose","types","SUPPORTED_PUBLIC_KEY_TYPES","didResult","resolve","accept","DID_JSON","result","Object","getOwnPropertyNames","indexOf","didDocument","didDocumentMetadata","didResolutionMetadata","contentType","error","message","getPublicKeyById","verificationMethods","pubid","filtered","id","publicKeysToCheck","verificationMethod","includes","assertionMethod","type","supported","didResolutionResult","verifyJWT","jwt","options","auth","audience","callbackUrl","skewTime","policies","header","decodeJWT","prototype","hasOwnProperty","call","did","iss","SELF_ISSUED_V2","sub","sub_jwk","kid","SELF_ISSUED_V0_1","verifyJWSDecoded","now","Math","floor","Date","NBF_SKEW","nowSkewed","nbf","iat","exp","aud","audArray","isArray","matchedAudience","item","verified","createJWT","expiresIn","canonicalize","typ","timestamps","fullPayload","createJWS","defaultAlg","encodedPayload","encodeSection","signingInput","jwtSigner","shouldCanonicalize","canonicalizeData","JSON","stringify","decodeJWS","jws","parts","match","parse","decodedJwt","assign","pubKeys","verifyJWS","jwsDecoded","pact","state","v","bind","then","observer","o","onFulfilled","onRejected","callback","_this","thenable","validateJWE","jwe","protected","iv","recipients","rec","encrypted_key","encodeJWE","protectedHeader","recipient","aad","decryptJWE","decrypter","cleartext","protHeader","enc","sealed","decrypt","createJWE","encrypters","encrypt","encryptionResult","tmpEnc","reduce","acc","encrypter","cek","encryptCek","push","createX25519ECDH","mySecretKey","theirPublicKey","sharedKey","resolveX25519Encrypters","dids","encryptersForDID","resolved","agreementKeys","keyAgreement","pks","Boolean","controllerEncrypters","x25519Encrypter","controller","controllers","encrypterPromises","catch","Promise","all","encrypterArrays","flattenedArray","createAuthEncrypter","recipientPublicKey","senderSecret","xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonEncrypter","createAuthDecrypter","recipientSecret","senderPublicKey","xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonDecrypter","x25519Decrypter","xc20pEncrypter","cipher","XChaCha20Poly1305","randomBytes","nonceLength","seal","subarray","tagLength","xc20pDirEncrypter","encodedAad","xc20pEncrypt","xc20pDirDecrypter","open","epk","generateKeyPair","sharedSecret","kek","res","zE","zS","partyUInfo","partyVInfo","apu","apv","validateHeader","receiverSecret","sealedCek"],"mappings":"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"}